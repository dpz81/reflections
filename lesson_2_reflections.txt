What happens when you initialize a repository? Why do you need to do it?

It creates a hidden directory called .git with metadata related to the new repository created.
I need to do it to be able to kkep track of the changes i do to my files in the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

In the staging area there are the files that we add manually because of changes, to be commited to the repository.
It ables you to only keep track of the files you consider, and then later do a single commit reflecting all the changes at once.

How can you use the staging area to make sure you have one commit per logical
change?

Adding the files to tha one logical change in the staging area before do the commit.
For each logical change you add the necessary files to the staging area an then 
commit them with a clean message.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When you have to do some big-experimental change, or one that changes the behaviour
of the program so much that it deserves its own branch.
You still can keep the master branch with its original thought meaning while having branches
that differ quite a bit on that meaning.

How do the diagrams help you visualize the branch structure?

They show all the derivate branches of the master branch in a clean visual way 
that's followed easily than comparing the raw logs status.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result is a new branch that merges all the changes did on both branches, 
keeping the history of all the commits that had been done on each of them.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
